package uk.org.lidalia.exampleapp.system.db

import java.sql.{Array, Blob, CallableStatement, Clob, Connection, DatabaseMetaData, NClob, PreparedStatement, SQLWarning, SQLXML, Savepoint, Statement, Struct}
import java.util
import java.util.Properties
import java.util.concurrent.Executor

import uk.org.lidalia.scalalang.Reusable
import uk.org.lidalia.scalalang.Reusable.{BROKEN, OK, State}

class DelegatingConnection(conn: Connection) extends Connection {

  override def setAutoCommit(autoCommit: Boolean): Unit = conn.setAutoCommit(autoCommit)

  override def setHoldability(holdability: Int): Unit = conn.setHoldability(holdability)

  override def clearWarnings(): Unit = conn.clearWarnings()

  override def getNetworkTimeout: Int = conn.getNetworkTimeout

  override def createBlob(): Blob = conn.createBlob()

  override def createSQLXML(): SQLXML = conn.createSQLXML()

  override def setSavepoint(): Savepoint = conn.setSavepoint()

  override def setSavepoint(name: String): Savepoint = conn.setSavepoint(name)

  override def createNClob(): NClob = conn.createNClob()

  override def getTransactionIsolation: Int = conn.getTransactionIsolation

  override def getClientInfo(name: String): String = conn.getClientInfo(name)

  override def getClientInfo: Properties = conn.getClientInfo()

  override def getSchema: String = conn.getSchema

  override def setNetworkTimeout(executor: Executor, milliseconds: Int): Unit = conn.setNetworkTimeout(executor, milliseconds)

  override def getMetaData: DatabaseMetaData = conn.getMetaData

  override def getTypeMap: util.Map[String, Class[_]] = conn.getTypeMap

  override def rollback(): Unit = conn.rollback()

  override def rollback(savepoint: Savepoint): Unit = conn.rollback(savepoint)

  override def createStatement(): Statement = conn.createStatement()

  override def createStatement(resultSetType: Int, resultSetConcurrency: Int): Statement = conn.createStatement(resultSetType, resultSetConcurrency)

  override def createStatement(resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): Statement = conn.createStatement(resultSetType, resultSetHoldability)

  override def getHoldability: Int = conn.getHoldability

  override def setReadOnly(readOnly: Boolean): Unit = conn.setReadOnly(readOnly)

  override def setClientInfo(name: String, value: String): Unit = conn.setClientInfo(name, value)

  override def setClientInfo(properties: Properties): Unit = conn.setClientInfo(properties)

  override def isReadOnly: Boolean = conn.isReadOnly

  override def setTypeMap(map: util.Map[String, Class[_]]): Unit = conn.setTypeMap(map)

  override def getCatalog: String = conn.getCatalog

  override def createClob(): Clob = conn.createClob()

  override def nativeSQL(sql: String): String = conn.nativeSQL(sql)

  override def setTransactionIsolation(level: Int): Unit = conn.setTransactionIsolation(level)

  override def prepareCall(sql: String): CallableStatement = conn.prepareCall(sql)

  override def prepareCall(sql: String, resultSetType: Int, resultSetConcurrency: Int): CallableStatement = conn.prepareCall(sql, resultSetType, resultSetConcurrency)

  override def prepareCall(sql: String, resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): CallableStatement = conn.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability)

  override def createArrayOf(typeName: String, elements: scala.Array[AnyRef]): Array = conn.createArrayOf(typeName, elements)

  override def setCatalog(catalog: String): Unit = conn.setCatalog(catalog)

  override def close(): Unit = conn.close()

  override def getAutoCommit: Boolean = conn.getAutoCommit

  override def abort(executor: Executor): Unit = conn.abort(executor)

  override def isValid(timeout: Int): Boolean = conn.isValid(timeout)

  override def prepareStatement(sql: String): PreparedStatement = conn.prepareStatement(sql)

  override def prepareStatement(sql: String, resultSetType: Int, resultSetConcurrency: Int): PreparedStatement = conn.prepareStatement(sql, resultSetType, resultSetConcurrency)

  override def prepareStatement(sql: String, resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): PreparedStatement = conn.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability)

  override def prepareStatement(sql: String, autoGeneratedKeys: Int): PreparedStatement = conn.prepareStatement(sql, autoGeneratedKeys)

  override def releaseSavepoint(savepoint: Savepoint): Unit = conn.releaseSavepoint(savepoint)

  override def isClosed: Boolean = conn.isClosed

  override def getWarnings: SQLWarning = conn.getWarnings

  override def setSchema(schema: String): Unit = conn.setSchema(schema)

  override def commit(): Unit = conn.commit()

  override def unwrap[T](iface: Class[T]): T = {
    if (iface.isAssignableFrom(getClass)) {
      this.asInstanceOf[T]
    } else {
      conn.unwrap(iface)
    }
  }

  override def isWrapperFor(iface: Class[_]): Boolean = {
    iface.isAssignableFrom(getClass) || conn.isWrapperFor(iface)
  }

  override def prepareStatement(sql: String, columnIndexes: scala.Array[Int]): PreparedStatement = prepareStatement(sql, columnIndexes)

  override def prepareStatement(sql: String, columnNames: scala.Array[String]): PreparedStatement = prepareStatement(sql, columnNames)

  override def createStruct(typeName: String, attributes: scala.Array[AnyRef]): Struct = createStruct(typeName, attributes)
}
